worker_processes 1;
daemon off;
  
error_log /dev/stderr debug;
  
events {
    worker_connections 1024;
    use epoll;
}

# even when the thread is bust, next requests will be queued, if possible
# in any case the main event loop stays available to process other requests!
thread_pool pool threads=1 max_queue=4;

http {
    server {
        listen 127.0.0.1:12345;

        location / {
            content_by_lua_block { ngx.say("hello, world!") }
        }

        location /sleep {
            content_by_lua_block {
                local threadpool = require 'resty.threadpool'
                -- TODO: handle resume parameters
                local t = threadpool.create('pool', function()
                    -- the spawned thread is actually a coroutine that can yield
                    -- results in the middle if necessary
                    coroutine.yield(os.execute('sleep 5'))
                    return os.execute('sleep 5')
                end)
                local rc = t:resume()
                ngx.say('finished, rc=' .. tostring(rc))
                ngx.flush()
                local rc = t:resume()
                ngx.say('finished, rc=' .. tostring(rc))
            }
        }
    }
}

